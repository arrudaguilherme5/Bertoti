# Comentário 1

What precisely do we mean by software engineering? What distinguishes “software engineering” from “programming” or “computer science”? And why would Google have a unique perspective to add to the corpus of previous software engineering literature written over the past 50 years? The terms “programming” and “software engineering” have been used interchangeably for quite some time in our industry, although each term has a different emphasis and different implications. University students tend to study computer science and get jobs writing code as “programmers.” “Software engineering,” however, sounds more serious, as if it implies the application of some theoretical knowledge to build something real and precise. Mechanical engineers, civil engineers, aeronautical engineers, and those in other engineering disciplines all practice engineering. They all work in the real world and use the application of their theoretical knowledge to create something real. Software engineers also create “something real,” though it is less tangible than the things other engineers create. Unlike those more established engineering professions, current software engineering theory or practice is not nearly as rigorous. Aeronautical engineers must follow rigid guidelines and practices, because errors in their calculations can cause real damage; programming, on the whole, has traditionally not followed such rigorous practices. But, as software becomes more integrated into our lives, we must adopt and rely on more rigorous engineering methods. We hope this book helps others see a path toward more reliable software practices.

O que precisamos queremos dizer com engenharia de software? O que distingue “engenharia de software” da “programação” ou “ciência da computação”? E por que o Google teria uma perspectiva única para adicionar ao corpus da literatura anterior de engenharia de software escrita nos últimos 50 anos? Os termos "programação" e "engenharia de software" são usados ​​de forma intercambiável há algum tempo em nosso setor, embora cada termo tenha uma ênfase diferente e implicações diferentes. Os estudantes universitários tendem a estudar ciência da computação e obter o código de escrita de empregos como "programadores". "Engenharia de software", no entanto, parece mais sério, como se implique a aplicação de algum conhecimento teórico para criar algo real e preciso. Engenheiros mecânicos, engenheiros civis, engenheiros aeronáuticos e aqueles em outras disciplinas de engenharia em engenharia pratica. Todos eles funcionam no mundo real e usam a aplicação de seu conhecimento teórico para criar algo real. Os engenheiros de software também criam "algo real", embora seja menos tangível do que as coisas que outros engenheiros criam. Ao contrário das profissões de engenharia mais estabelecidas, a teoria ou prática atual de engenharia de software não é tão rigorosa. Os engenheiros aeronáuticos devem seguir diretrizes e práticas rígidas, porque os erros em seus cálculos podem causar danos reais; A programação, em geral, tradicionalmente não segue práticas tão rigorosas. Mas, à medida que o software se torna mais integrado em nossas vidas, devemos adotar e confiar em métodos de engenharia mais rigorosos. Esperamos que este livro ajude outras pessoas a ver um caminho para práticas de software mais confiáveis.

As engenharias mais antigas, as clássicas, projetam e constroem coisas reais, projetos que saem do papel e viram edifícios, carros, aeronáves, 
etc, porém, cada vez mais com o avanço tecnológico, o mundo real esta ficando cada vez mais entrelaçado com o mundo virtual, logo, não ter 
projetos robustos com o rigor das ciências e da engenharia seria correr riscos reais e palpáveis. Por isso, cada vez mais, é inegável a 
necessidade de métodos mais sofisticados e seguros para o desenvolvimento de softwares. 

